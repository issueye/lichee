definitions:
  middleware.JwtToken:
    properties:
      expires:
        description: 时间
        type: string
      id:
        description: id
        type: integer
      name:
        description: 用户名
        type: string
      token:
        description: token
        type: string
      uid:
        description: 用户ID
        type: string
    type: object
  model.LoginUser:
    properties:
      account:
        description: 登录名
        type: string
      password:
        description: 用户密码
        type: string
    type: object
  model.Param:
    properties:
      area:
        description: 参数域
        type: string
      area_id:
        description: 参数域id
        type: integer
      id:
        description: id
        type: integer
      mark:
        description: 备注
        type: string
      name:
        description: 参数名称
        type: string
      value:
        description: 参数值
        type: string
    type: object
  model.ParamArea:
    properties:
      id:
        description: id
        type: integer
      mark:
        description: 备注
        type: string
      name:
        description: 域名称
        type: string
    type: object
  model.ReqCreateArea:
    properties:
      mark:
        description: 备注
        type: string
      name:
        description: 域名称
        type: string
    type: object
  model.ReqCreateDbSource:
    properties:
      database:
        description: 数据库
        example: TEST
        type: string
      host:
        description: 地址
        example: 192.168.200.66/gy
        type: string
      mark:
        description: 备注
        type: string
      name:
        description: 名称
        example: 测试SQLSERVER_001
        type: string
      password:
        description: 密码
        example: "123456"
        type: string
      port:
        description: 端口号
        example: 1433
        type: integer
      type:
        description: 类型
        example: 0
        type: integer
      user:
        description: 账号
        example: sa
        type: string
    required:
    - database
    - host
    - name
    - password
    - port
    - user
    type: object
  model.ReqCreateJob:
    properties:
      area_id:
        description: 参数域ID
        example: 10000
        type: integer
      expr:
        description: 时间表达式
        example: 0/5 * * * * ?
        type: string
      mark:
        description: 备注
        example: 每五秒执行一次脚本
        type: string
      name:
        description: 名称
        example: 测试定时任务
        type: string
      path:
        description: 脚本路径
        example: test.js
        type: string
    required:
    - area_id
    - expr
    - name
    - path
    type: object
  model.ReqCreateParam:
    properties:
      area_id:
        description: 参数域id
        type: integer
      mark:
        description: 备注
        type: string
      name:
        description: 参数名称
        type: string
      value:
        description: 参数值
        type: string
    type: object
  model.ReqCreateUser:
    properties:
      account:
        description: 登录名
        type: string
      mark:
        description: 备注
        type: string
      name:
        description: 用户名
        type: string
      password:
        description: 用户密码
        type: string
    type: object
  model.ReqModifyArea:
    properties:
      id:
        description: id
        type: integer
      mark:
        description: 备注
        type: string
      name:
        description: 域名称
        type: string
    type: object
  model.ReqModifyDbSource:
    properties:
      database:
        description: 数据库
        example: TEST
        type: string
      host:
        description: 地址
        example: 192.168.200.66/gy
        type: string
      id:
        description: ID
        example: 10000
        type: integer
      mark:
        description: 备注
        type: string
      name:
        description: 名称
        example: 测试SQLSERVER_001
        type: string
      password:
        description: 密码
        example: "123456"
        type: string
      port:
        description: 端口号
        example: 1433
        type: integer
      type:
        description: 类型
        example: 0
        type: integer
      user:
        description: 账号
        example: sa
        type: string
    required:
    - database
    - host
    - id
    - name
    - password
    - port
    - user
    type: object
  model.ReqModifyJob:
    properties:
      area_id:
        description: 参数域ID
        example: 10000
        type: integer
      expr:
        description: 时间表达式
        type: string
      id:
        description: 任务ID
        type: integer
      mark:
        description: 备注
        type: string
      name:
        description: 名称
        type: string
      path:
        description: 脚本路径
        type: string
    required:
    - area_id
    - expr
    - id
    - name
    - path
    type: object
  model.ReqModifyParam:
    properties:
      area:
        description: 参数域
        type: string
      area_id:
        description: 参数域id
        type: integer
      id:
        description: id
        type: integer
      mark:
        description: 备注
        type: string
      name:
        description: 参数名称
        type: string
      value:
        description: 参数值
        type: string
    type: object
  model.ReqModifyUser:
    properties:
      account:
        description: 登录名
        type: string
      id:
        description: 用户ID
        type: integer
      mark:
        description: 备注
        type: string
      name:
        description: 用户名
        type: string
      password:
        description: 用户密码
        type: string
    type: object
  model.ReqQueryDbSource:
    properties:
      isNotPaging:
        description: 是否分页
        type: boolean
      name:
        description: 名称
        type: string
      pageNum:
        description: 页数
        type: integer
      pageSize:
        description: 页码
        type: integer
      total:
        description: 总数  由服务器返回回去
        type: integer
    type: object
  model.ReqQueryUser:
    properties:
      account:
        description: 登录名
        type: string
      isNotPaging:
        description: 是否分页
        type: boolean
      mark:
        description: 备注
        type: string
      name:
        description: 用户名
        type: string
      pageNum:
        description: 页数
        type: integer
      pageSize:
        description: 页码
        type: integer
      total:
        description: 总数  由服务器返回回去
        type: integer
    type: object
  model.ResQueryJob:
    properties:
      area:
        description: 参数域
        type: string
      area_id:
        type: integer
      create_time:
        description: 创建时间
        type: string
      enable:
        description: 状态
        type: boolean
      expr:
        description: 时间表达式
        type: string
      id:
        description: 任务ID
        type: integer
      mark:
        description: 备注
        type: string
      name:
        description: 名称
        type: string
      path:
        description: 脚本路径
        type: string
    type: object
  res.Base:
    properties:
      code:
        allOf:
        - $ref: '#/definitions/res.RCode'
        description: 状态码
      message:
        description: 状态消息
        type: string
      requestDatetime:
        description: 请求时间
        type: string
      requestId:
        description: 请求ID
        type: string
      responseDatetime:
        description: 返回时间
        type: string
    type: object
  res.Full:
    properties:
      code:
        allOf:
        - $ref: '#/definitions/res.RCode'
        description: 状态码
      data:
        description: 返回数据
      message:
        description: 状态消息
        type: string
      requestDatetime:
        description: 请求时间
        type: string
      requestId:
        description: 请求ID
        type: string
      responseDatetime:
        description: 返回时间
        type: string
    type: object
  res.RCode:
    enum:
    - 200
    - 201
    - 400
    - 401
    - 404
    - 405
    - 500
    - 501
    - 502
    - 504
    - 505
    type: integer
    x-enum-varnames:
    - OK
    - OK_CREATE
    - BAD_REQUEST
    - UNAUTHORIZED
    - NOT_FOUND
    - METHOD_NOT_ALLOWED
    - INTERNAL_SERVER_ERROR
    - NOT_IMPLEMENTED
    - BAD_GATEWAY
    - GATEWAY_TIMEOUT
    - HTTP_VERSION_NOT_SUPPORTED
info:
  contact: {}
paths:
  /api/area:
    get:
      description: 获取参数域列表
      parameters:
      - description: 是否需要分页， 默认需要， 如果不分页 传 true
        in: query
        name: isNotPaging
        type: string
      - description: 页码， 如果不分页 传 0
        in: query
        name: pageNum
        type: string
      - description: 一页大小， 如果不分页 传 0
        in: query
        name: pageSize
        type: string
      - description: 检索内容
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            allOf:
            - $ref: '#/definitions/res.Full'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.ParamArea'
                  type: array
              type: object
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 获取参数域列表
      tags:
      - 参数管理
    post:
      description: 添加参数
      parameters:
      - description: 添加参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ReqCreateArea'
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 添加参数
      tags:
      - 参数管理
    put:
      description: 修改参数域信息
      parameters:
      - description: 修改参数域信息
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ReqModifyArea'
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 修改参数域信息
      tags:
      - 参数管理
  /api/area/{id}:
    delete:
      description: 获取参数域列表
      parameters:
      - description: 参数域ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 获取参数域列表
      tags:
      - 参数管理
  /api/dbSource:
    get:
      description: 获取数据库源列表
      parameters:
      - description: 是否需要分页， 默认需要， 如果不分页 传 true
        in: query
        name: isNotPaging
        type: string
      - description: 页码， 如果不分页 传 0
        in: query
        name: pageNum
        type: string
      - description: 一页大小， 如果不分页 传 0
        in: query
        name: pageSize
        type: string
      - description: 数据源名称
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            allOf:
            - $ref: '#/definitions/res.Full'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.ReqQueryDbSource'
                  type: array
              type: object
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 获取数据库源列表
      tags:
      - 数据库源管理
    post:
      description: 添加数据库源
      parameters:
      - description: 添加参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ReqCreateDbSource'
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 添加数据库源
      tags:
      - 数据库源管理
    put:
      description: 修改数据库源数据
      parameters:
      - description: 修改定时任务数据
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ReqModifyDbSource'
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 修改数据库源数据
      tags:
      - 数据库源管理
  /api/dbSource/{id}:
    delete:
      description: 删除数据库源
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 删除数据库源
      tags:
      - 数据库源管理
  /api/dbSource/testLink:
    post:
      description: 修改数据库源数据
      parameters:
      - description: 修改定时任务数据
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ReqModifyDbSource'
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 修改数据库源数据
      tags:
      - 数据库源管理
  /api/job:
    get:
      description: 获取定时任务列表
      parameters:
      - description: 是否需要分页， 默认需要， 如果不分页 传 true
        in: query
        name: isNotPaging
        type: string
      - description: 页码， 如果不分页 传 0
        in: query
        name: pageNum
        type: string
      - description: 一页大小， 如果不分页 传 0
        in: query
        name: pageSize
        type: string
      - description: 任务名称
        in: query
        name: name
        type: string
      - description: 任务描述
        in: query
        name: mark
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            allOf:
            - $ref: '#/definitions/res.Full'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.ResQueryJob'
                  type: array
              type: object
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 获取定时任务列表
      tags:
      - 定时任务管理
    post:
      description: 添加定时任务数据
      parameters:
      - description: 添加定时任务数据
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ReqCreateJob'
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 添加定时任务数据
      tags:
      - 定时任务管理
    put:
      description: 修改定时任务数据
      parameters:
      - description: 修改定时任务数据
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ReqModifyJob'
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 修改定时任务数据
      tags:
      - 定时任务管理
  /api/job/{id}:
    delete:
      description: 删除定时任务
      parameters:
      - description: 任务ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 删除定时任务
      tags:
      - 定时任务管理
  /api/job/atOnceRun/{id}:
    get:
      description: 马上运行一次任务
      parameters:
      - description: 任务ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 马上运行一次任务
      tags:
      - 定时任务管理
  /api/job/status/{id}:
    put:
      description: 修改定时任务数据
      parameters:
      - description: 任务ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 修改定时任务数据
      tags:
      - 定时任务管理
  /api/login:
    post:
      description: |-
        ```
        用户登录
        ```
      parameters:
      - description: 登录信息
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Full'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      summary: 用户登录
      tags:
      - 基本接口
  /api/logout:
    get:
      description: 用户登出时，调用此接口
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 用户登出
      tags:
      - 基本接口
  /api/param:
    get:
      description: 获取参数列表
      parameters:
      - description: 是否需要分页， 默认需要， 如果不分页 传 true
        in: query
        name: isNotPaging
        type: string
      - description: 页码， 如果不分页 传 0
        in: query
        name: pageNum
        type: string
      - description: 一页大小， 如果不分页 传 0
        in: query
        name: pageSize
        type: string
      - description: 查询内容
        in: query
        name: name
        type: string
      - description: 参数域ID
        in: query
        name: area_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            allOf:
            - $ref: '#/definitions/res.Full'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Param'
                  type: array
              type: object
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 获取参数列表
      tags:
      - 参数管理
    post:
      description: 添加参数
      parameters:
      - description: 添加参数
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ReqCreateParam'
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 添加参数
      tags:
      - 参数管理
    put:
      description: 修改参数信息
      parameters:
      - description: 修改参数信息
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ReqModifyParam'
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 修改参数信息
      tags:
      - 参数管理
  /api/param/{areaid}/{id}:
    delete:
      description: 删除参数
      parameters:
      - description: 参数域ID
        in: path
        name: areaid
        required: true
        type: string
      - description: 参数ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 删除参数
      tags:
      - 参数管理
  /api/refreshToken:
    get:
      description: 当token即将获取或者过期时刷新token
      produces:
      - application/json
      responses:
        "200":
          description: code:200 成功
          schema:
            allOf:
            - $ref: '#/definitions/res.Full'
            - properties:
                data:
                  $ref: '#/definitions/middleware.JwtToken'
              type: object
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 刷新token
      tags:
      - 基本接口
  /api/user:
    get:
      description: 获取用户列表
      parameters:
      - description: 是否需要分页， 默认需要， 如果不分页 传 true
        in: query
        name: isNotPaging
        type: string
      - description: 页码， 如果不分页 传 0
        in: query
        name: pageNum
        type: string
      - description: 一页大小， 如果不分页 传 0
        in: query
        name: pageSize
        type: string
      - description: 任务名称
        in: query
        name: name
        type: string
      - description: 任务名称
        in: query
        name: account
        type: string
      - description: 任务描述
        in: query
        name: mark
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            allOf:
            - $ref: '#/definitions/res.Full'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.ReqQueryUser'
                  type: array
              type: object
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 获取用户列表
      tags:
      - 用户管理
    post:
      description: 添加用户
      parameters:
      - description: 添加用户
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ReqCreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 添加用户
      tags:
      - 用户管理
    put:
      description: 修改用户信息
      parameters:
      - description: 修改用户信息
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ReqModifyUser'
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 修改用户信息
      tags:
      - 用户管理
  /api/user/{id}:
    delete:
      description: 删除用户
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 删除用户
      tags:
      - 用户管理
  /api/user/status/{id}:
    put:
      description: 停用/启用用户
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'code: 200 成功'
          schema:
            $ref: '#/definitions/res.Base'
        "500":
          description: 错误返回内容
          schema:
            $ref: '#/definitions/res.Base'
      security:
      - ApiKeyAuth: []
      summary: 停用/启用用户
      tags:
      - 用户管理
swagger: "2.0"
